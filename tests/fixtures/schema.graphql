schema {
  query: IndexedTable
}

"""base64 encoded bytes"""
scalar Binary

"""column of binaries"""
type BinaryColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Binary, notEqual: Binary, isIn: [Binary!]): Long!

  """whether any values evaluate to true"""
  any: Boolean!

  """whether all values evaluate to true"""
  all: Boolean!

  """list of values"""
  values: [Binary]!

  """unique values and counts"""
  unique: BinarySet!

  """Return values with null elements replaced."""
  fillNull(value: Binary!): BinaryColumn!

  """length of bytes or strings"""
  binaryLength: IntColumn!
}

"""predicates for binaries"""
input BinaryFilter {
  equal: Binary
  notEqual: Binary
  isIn: [Binary!]
  apply: NominalFilter
}

"""functions for binaries"""
input BinaryFunction {
  alias: String
  fillNull: Binary
  binaryLength: Boolean! = false
}

"""unique binaries"""
type BinarySet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Binary]!
}

"""column of booleans"""
type BooleanColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Boolean, notEqual: Boolean): Long!

  """whether any values evaluate to true"""
  any: Boolean!

  """whether all values evaluate to true"""
  all: Boolean!

  """list of values"""
  values: [Boolean]!

  """unique values and counts"""
  unique: BooleanSet!
}

"""predicates for booleans"""
input BooleanFilter {
  equal: Boolean
  notEqual: Boolean
  apply: NominalFilter
}

"""unique booleans"""
type BooleanSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Boolean]!
}

"""column interface"""
interface Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!
}

"""fields for each column"""
type Columns {
  bool: BooleanColumn!

  """Return column with optional projection."""
  uint8(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): IntColumn!

  """Return column with optional projection."""
  int8(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): IntColumn!

  """Return column with optional projection."""
  uint16(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): IntColumn!

  """Return column with optional projection."""
  int16(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): IntColumn!

  """Return column with optional projection."""
  uint32(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): LongColumn!

  """Return column with optional projection."""
  int32(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): IntColumn!

  """Return column with optional projection."""
  uint64(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): LongColumn!

  """Return column with optional projection."""
  int64(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): LongColumn!

  """Return column with optional projection."""
  float(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): FloatColumn!

  """Return column with optional projection."""
  double(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): FloatColumn!

  """Return column with optional projection."""
  decimal(minimum: String, maximum: String): DecimalColumn!

  """Return column with optional projection."""
  date32(minimum: String, maximum: String): DateColumn!

  """Return column with optional projection."""
  date64(minimum: String, maximum: String): DateColumn!

  """Return column with optional projection."""
  timestamp(minimum: String, maximum: String): DateTimeColumn!

  """Return column with optional projection."""
  time32(minimum: String, maximum: String): TimeColumn!

  """Return column with optional projection."""
  time64(minimum: String, maximum: String): TimeColumn!
  binary: BinaryColumn!

  """Return column with optional projection."""
  string(minimum: String, maximum: String): StringColumn!

  """Return column with optional projection."""
  snakeId(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): LongColumn!

  """Return column with optional projection."""
  camelId(add: String, subtract: String, multiply: String, divide: String, minimum: String, maximum: String): LongColumn!
  list: ListColumn!
  struct: StructColumn!
}

"""Date (isoformat)"""
scalar Date

"""column of dates"""
type DateColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Date, notEqual: Date, less: Date, lessEqual: Date, greater: Date, greaterEqual: Date, isIn: [Date!]): Long!

  """list of values"""
  values: [Date]!

  """unique values and counts"""
  unique: DateSet!

  """minimum value"""
  min: Date

  """maximum value"""
  max: Date

  """Return values with null elements replaced."""
  fillNull(value: Date!): DateColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: Date!): DateColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Date!): DateColumn!
}

"""predicates for dates"""
input DateFilter {
  equal: Date
  notEqual: Date
  less: Date
  lessEqual: Date
  greater: Date
  greaterEqual: Date
  isIn: [Date!]
  apply: OrdinalFilter
}

"""functions for dates"""
input DateFunction {
  alias: String
  minimum: String
  maximum: String
  fillNull: Date
}

"""unique dates"""
type DateSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Date]!
}

"""Date with time (isoformat)"""
scalar DateTime

"""column of datetimes"""
type DateTimeColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: DateTime, notEqual: DateTime, less: DateTime, lessEqual: DateTime, greater: DateTime, greaterEqual: DateTime, isIn: [DateTime!]): Long!

  """list of values"""
  values: [DateTime]!

  """unique values and counts"""
  unique: DatetimeSet!

  """minimum value"""
  min: DateTime

  """maximum value"""
  max: DateTime

  """Return values with null elements replaced."""
  fillNull(value: DateTime!): DateTimeColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: DateTime!): DateTimeColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: DateTime!): DateTimeColumn!

  """Return values subtracted *from* scalar."""
  subtract(value: DateTime!): DurationColumn!
}

"""discrete difference predicates for datetimes"""
input DateTimeDiff {
  less: DateTime
  lessEqual: DateTime
  greater: DateTime
  greaterEqual: DateTime
}

"""predicates for datetimes"""
input DateTimeFilter {
  equal: DateTime
  notEqual: DateTime
  less: DateTime
  lessEqual: DateTime
  greater: DateTime
  greaterEqual: DateTime
  isIn: [DateTime!]
  apply: OrdinalFilter
}

"""functions for datetimes"""
input DateTimeFunction {
  alias: String
  minimum: String
  maximum: String
  subtract: String
  fillNull: DateTime
}

"""unique datetimes"""
type DatetimeSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [DateTime]!
}

"""Decimal (fixed-point)"""
scalar Decimal

"""column of decimals"""
type DecimalColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Decimal, notEqual: Decimal, less: Decimal, lessEqual: Decimal, greater: Decimal, greaterEqual: Decimal, isIn: [Decimal!]): Long!

  """list of values"""
  values: [Decimal]!

  """unique values and counts"""
  unique: DecimalSet!

  """minimum value"""
  min: Decimal

  """maximum value"""
  max: Decimal

  """Return element-wise minimum compared to scalar."""
  minimum(value: Decimal!): DecimalColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Decimal!): DecimalColumn!
}

"""predicates for decimals"""
input DecimalFilter {
  equal: Decimal
  notEqual: Decimal
  less: Decimal
  lessEqual: Decimal
  greater: Decimal
  greaterEqual: Decimal
  isIn: [Decimal!]
  apply: OrdinalFilter
}

"""functions for decimals"""
input DecimalFunction {
  alias: String
  minimum: String
  maximum: String
}

"""unique decimals"""
type DecimalSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Decimal]!
}

"""discrete difference predicates"""
input Diff {
  less: Null
  lessEqual: Null
  greater: Null
  greaterEqual: Null
}

"""discrete difference predicates for each column"""
input Diffs {
  uint8: IntDiff
  int8: IntDiff
  uint16: IntDiff
  int16: IntDiff
  uint32: LongDiff
  int32: IntDiff
  uint64: LongDiff
  int64: LongDiff
  float: FloatDiff
  double: FloatDiff
  decimal: Diff
  date32: Diff
  date64: Diff
  timestamp: DateTimeDiff
  time32: Diff
  time64: Diff
  string: Diff
  snakeId: LongDiff
  camelId: LongDiff
}

"""duration float (in seconds)"""
scalar Duration

"""column of durations"""
type DurationColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Duration, notEqual: Duration, less: Duration, lessEqual: Duration, greater: Duration, greaterEqual: Duration, isIn: [Duration!]): Long!

  """list of values"""
  values: [Duration]!

  """Return q-th quantiles for values."""
  quantile(q: [Float!]!): [Duration]!

  """Return element-wise minimum compared to scalar."""
  minimum(value: Duration!): DurationColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Duration!): DurationColumn!

  """absolute values"""
  absolute: DurationColumn!
}

"""predicates for durations"""
input DurationFilter {
  equal: Duration
  notEqual: Duration
  less: Duration
  lessEqual: Duration
  greater: Duration
  greaterEqual: Duration
  isIn: [Duration!]
  apply: OrdinalFilter
}

"""names and aliases for aggregation"""
input Field {
  name: String!
  alias: String! = ""
}

"""predicates for columns of unknown type as a tagged union"""
input Filter {
  name: String!
  boolean: BooleanFilter
  int: IntFilter
  long: LongFilter
  float: FloatFilter
  decimal: DecimalFilter
  date: DateFilter
  datetime: DateTimeFilter
  time: TimeFilter
  duration: DurationFilter
  binary: BinaryFilter
  string: StringFilter
}

"""predicates for each column"""
input Filters {
  bool: BooleanFilter
  uint8: IntFilter
  int8: IntFilter
  uint16: IntFilter
  int16: IntFilter
  uint32: LongFilter
  int32: IntFilter
  uint64: LongFilter
  int64: LongFilter
  float: FloatFilter
  double: FloatFilter
  decimal: DecimalFilter
  date32: DateFilter
  date64: DateFilter
  timestamp: DateTimeFilter
  time32: TimeFilter
  time64: TimeFilter
  binary: BinaryFilter
  string: StringFilter
  snakeId: LongFilter
  camelId: LongFilter
}

"""column of floats"""
type FloatColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Float, notEqual: Float, less: Float, lessEqual: Float, greater: Float, greaterEqual: Float, isIn: [Float!]): Long!

  """whether any values evaluate to true"""
  any: Boolean!

  """whether all values evaluate to true"""
  all: Boolean!

  """list of values"""
  values: [Float]!

  """unique values and counts"""
  unique: FloatSet!

  """Return sorted values. Optimized for fixed length."""
  sort(reverse: Boolean! = false, length: Long = null): [Float]!

  """sum of the values"""
  sum: Float

  """mean of the values"""
  mean: Float

  """mode of the values"""
  mode: Float

  """standard deviation of the values"""
  stddev: Float

  """variance of the values"""
  variance: Float

  """minimum value"""
  min: Float

  """maximum value"""
  max: Float

  """Return q-th quantiles for values."""
  quantile(q: [Float!]!): [Float]!

  """Return values with null elements replaced."""
  fillNull(value: Float!): FloatColumn!

  """Return values added to scalar."""
  add(value: Float!): FloatColumn!

  """Return values subtracted *from* scalar."""
  subtract(value: Float!): FloatColumn!

  """Return values multiplied by scalar."""
  multiply(value: Float!): FloatColumn!

  """Return values divided *into* scalar."""
  divide(value: Float!): FloatColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: Float!): FloatColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Float!): FloatColumn!

  """absolute values"""
  absolute: FloatColumn!
}

"""discrete difference predicates for floats"""
input FloatDiff {
  less: Float
  lessEqual: Float
  greater: Float
  greaterEqual: Float
}

"""predicates for floats"""
input FloatFilter {
  equal: Float
  notEqual: Float
  less: Float
  lessEqual: Float
  greater: Float
  greaterEqual: Float
  isIn: [Float!]
  absolute: Boolean! = false
  apply: OrdinalFilter
}

"""functions for floats"""
input FloatFunction {
  alias: String
  minimum: String
  maximum: String
  add: String
  subtract: String
  multiply: String
  divide: String
  absolute: Boolean! = false
  fillNull: Float
}

"""unique floats"""
type FloatSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Float]!
}

"""a table sorted by a composite index"""
type IndexedTable {
  """number of rows"""
  length: Long!

  """fields for each column"""
  columns: Columns!

  """
  Return column of any type by name.
          This is typically only needed for aliased columns added by `apply` or `aggregate`.
          If the column is in the schema, `columns` can be used instead.
  """
  column(name: String!): Column!

  """Return scalar values at index."""
  row(index: Long! = 0): Row!

  """Return table slice."""
  slice(offset: Long! = 0, length: Long = null): Table!

  """
  Return table grouped by columns, with stable ordering.
          Optionally include counts in an aliased column.
          `length` is the maximum number of groups to return.
  """
  group(by: [String!]!, reverse: Boolean! = false, length: Long = null, count: String! = ""): Table!

  """
  Return table partitioned by discrete differences of the values.
          Optionally include counts in an aliased column.
          Differs from `group` by relying on adjacency, and is typically faster.
  """
  partition(by: [String!]!, diffs: Diffs = null, count: String! = ""): Table!

  """
  Return table of first or last occurrences grouped by columns, with stable ordering.
          Optionally include counts in an aliased column.
          Faster than `group` when only scalars are needed.
  """
  unique(by: [String!]!, reverse: Boolean! = false, length: Long = null, count: String! = ""): Table!

  """Return table slice sorted by specified columns."""
  sort(by: [String!]!, reverse: Boolean! = false, length: Long = null): Table!

  """Return table with minimum values per column."""
  min(by: [String!]!): Table!

  """Return table with maximum values per column."""
  max(by: [String!]!): Table!

  """
  Return table with rows which match all (by default) queries.
          `invert` optionally excludes matching rows.
          `reduce` is the binary operator to combine filters; within a column all predicates must match.
          `predicates` are additional filters for column of unknown types, as the result of `apply`.
          List columns apply their respective filters to their own scalar values.
  """
  filter(query: Filters = null, invert: Boolean! = false, reduce: Operator! = AND, predicates: [Filter!]! = []): Table!

  """
  Return view of table with functions applied across columns.
          If no alias is provided, the column is replaced and should be of the same type.
          If an alias is provided, a column is added and may be referenced in the `column` interface,
          in filter `predicates`, and in the `by` arguments of grouping and sorting.
  """
  apply(uint8: IntFunction, int8: IntFunction, uint16: IntFunction, int16: IntFunction, uint32: LongFunction, int32: IntFunction, uint64: LongFunction, int64: LongFunction, float: FloatFunction, double: FloatFunction, decimal: DecimalFunction, date32: DateFunction, date64: DateFunction, timestamp: DateTimeFunction, time32: TimeFunction, time64: TimeFunction, binary: BinaryFunction, string: StringFunction, snakeId: LongFunction, camelId: LongFunction, list: ListFunction): Table!

  """
  Return a list of tables by splitting list columns, typically used after grouping.
          At least one list column must be referenced, and all list columns must have the same shape.
  """
  tables: [Table!]!

  """
  Return single table with aggregate functions applied to columns.
          The grouping keys are automatically included.
          Any remaining columns referenced in fields are kept as list columns.
          Columns which are aliased or change type can be accessed by the `column` field.
  """
  aggregate(count: [Field!]! = [], first: [Field!]! = [], last: [Field!]! = [], min: [Field!]! = [], max: [Field!]! = [], sum: [Field!]! = [], mean: [Field!]! = [], any: [Field!]! = [], all: [Field!]! = [], unique: [Field!]! = []): Table!

  """indexed columns"""
  index: [String!]!

  """
  Return table with matching values for compound `index`.
          Queries must be a prefix of the `index`.
          Only one non-equal query is allowed, and applied last.
  """
  search(snakeId: LongQuery, camelId: LongQuery): Table!
}

"""column of ints"""
type IntColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Int, notEqual: Int, less: Int, lessEqual: Int, greater: Int, greaterEqual: Int, isIn: [Int!]): Long!

  """whether any values evaluate to true"""
  any: Boolean!

  """whether all values evaluate to true"""
  all: Boolean!

  """list of values"""
  values: [Int]!

  """unique values and counts"""
  unique: IntSet!

  """Return sorted values. Optimized for fixed length."""
  sort(reverse: Boolean! = false, length: Long = null): [Int]!

  """sum of the values"""
  sum: Int

  """mean of the values"""
  mean: Float

  """mode of the values"""
  mode: Int

  """standard deviation of the values"""
  stddev: Float

  """variance of the values"""
  variance: Float

  """minimum value"""
  min: Int

  """maximum value"""
  max: Int

  """Return q-th quantiles for values."""
  quantile(q: [Float!]!): [Float]!

  """Return values with null elements replaced."""
  fillNull(value: Int!): IntColumn!

  """Return values added to scalar."""
  add(value: Int!): IntColumn!

  """Return values subtracted *from* scalar."""
  subtract(value: Int!): IntColumn!

  """Return values multiplied by scalar."""
  multiply(value: Int!): IntColumn!

  """Return values divided *into* scalar."""
  divide(value: Int!): IntColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: Int!): IntColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Int!): IntColumn!

  """absolute values"""
  absolute: IntColumn!
}

"""discrete difference predicates for ints"""
input IntDiff {
  less: Int
  lessEqual: Int
  greater: Int
  greaterEqual: Int
}

"""predicates for ints"""
input IntFilter {
  equal: Int
  notEqual: Int
  less: Int
  lessEqual: Int
  greater: Int
  greaterEqual: Int
  isIn: [Int!]
  absolute: Boolean! = false
  apply: OrdinalFilter
}

"""functions for ints"""
input IntFunction {
  alias: String
  minimum: String
  maximum: String
  add: String
  subtract: String
  multiply: String
  divide: String
  absolute: Boolean! = false
  fillNull: Int
}

"""unique ints"""
type IntSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Int]!
}

"""column of lists"""
type ListColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """list of columns"""
  values: [Column]!

  """number of values of each list scalar"""
  count: IntColumn!

  """concatenation of all sub-lists"""
  flatten: Column!

  """unique values within each scalar"""
  unique: ListColumn!

  """first value of each list scalar"""
  first: Column!

  """last value of each list scalar"""
  last: Column!

  """min value of each list scalar"""
  min: Column!

  """max value of each list scalar"""
  max: Column!

  """sum each list scalar"""
  sum: Column!

  """mean of each list scalar"""
  mean: FloatColumn!

  """mode of each list scalar"""
  mode: Column!

  """stddev of each list scalar"""
  stddev: FloatColumn!

  """mean of each list scalar"""
  variance: FloatColumn!

  """any true of each list scalar"""
  any: BooleanColumn!

  """all true of each list scalar"""
  all: BooleanColumn!
}

"""aggregate functions for lists"""
input ListFunction {
  alias: String
  count: Boolean! = false
  first: Boolean! = false
  last: Boolean! = false
  unique: Boolean! = false
  min: Boolean! = false
  max: Boolean! = false
  sum: Boolean! = false
  mean: Boolean! = false
}

"""64-bit int"""
scalar Long

"""column of longs"""
type LongColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Long, notEqual: Long, less: Long, lessEqual: Long, greater: Long, greaterEqual: Long, isIn: [Long!]): Long!

  """whether any values evaluate to true"""
  any: Boolean!

  """whether all values evaluate to true"""
  all: Boolean!

  """list of values"""
  values: [Long]!

  """unique values and counts"""
  unique: LongSet!

  """Return sorted values. Optimized for fixed length."""
  sort(reverse: Boolean! = false, length: Long = null): [Long]!

  """sum of the values"""
  sum: Long

  """mean of the values"""
  mean: Float

  """mode of the values"""
  mode: Long

  """standard deviation of the values"""
  stddev: Float

  """variance of the values"""
  variance: Float

  """minimum value"""
  min: Long

  """maximum value"""
  max: Long

  """Return q-th quantiles for values."""
  quantile(q: [Float!]!): [Float]!

  """Return values with null elements replaced."""
  fillNull(value: Long!): LongColumn!

  """Return values added to scalar."""
  add(value: Long!): LongColumn!

  """Return values subtracted *from* scalar."""
  subtract(value: Long!): LongColumn!

  """Return values multiplied by scalar."""
  multiply(value: Long!): LongColumn!

  """Return values divided *into* scalar."""
  divide(value: Long!): LongColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: Long!): LongColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Long!): LongColumn!

  """absolute values"""
  absolute: LongColumn!
}

"""discrete difference predicates for longs"""
input LongDiff {
  less: Long
  lessEqual: Long
  greater: Long
  greaterEqual: Long
}

"""predicates for longs"""
input LongFilter {
  equal: Long
  notEqual: Long
  less: Long
  lessEqual: Long
  greater: Long
  greaterEqual: Long
  isIn: [Long!]
  absolute: Boolean! = false
  apply: OrdinalFilter
}

"""functions for longs"""
input LongFunction {
  alias: String
  minimum: String
  maximum: String
  add: String
  subtract: String
  multiply: String
  divide: String
  absolute: Boolean! = false
  fillNull: Long
}

"""predicates for longs"""
input LongQuery {
  equal: Long
  notEqual: Long
  less: Long
  lessEqual: Long
  greater: Long
  greaterEqual: Long
  isIn: [Long!]
}

"""unique longs"""
type LongSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Long]!
}

"""nominal predicates projected across two columns"""
input NominalFilter {
  equal: String
  notEqual: String
}

scalar Null

enum Operator {
  AND
  OR
  XOR
}

"""ordinal predicates projected across two columns"""
input OrdinalFilter {
  equal: String
  notEqual: String
  less: String
  lessEqual: String
  greater: String
  greaterEqual: String
}

"""scalar fields"""
type Row {
  bool: Boolean
  uint8: Int
  int8: Int
  uint16: Int
  int16: Int
  uint32: Long
  int32: Int
  uint64: Long
  int64: Long
  float: Float
  double: Float
  decimal: Decimal
  date32: Date
  date64: Date
  timestamp: DateTime
  time32: Time
  time64: Time
  binary: Binary
  string: String
  snakeId: Long
  camelId: Long
  list: Column
}

"""unique values"""
interface Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!
}

"""column of strings"""
type StringColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: String, notEqual: String, less: String, lessEqual: String, greater: String, greaterEqual: String, isIn: [String!], matchSubstring: String, utf8Lower: Boolean! = false, utf8Upper: Boolean! = false, stringIsAscii: Boolean! = false, utf8IsAlnum: Boolean! = false, utf8IsAlpha: Boolean! = false, utf8IsDecimal: Boolean! = false, utf8IsDigit: Boolean! = false, utf8IsLower: Boolean! = false, utf8IsNumeric: Boolean! = false, utf8IsPrintable: Boolean! = false, utf8IsSpace: Boolean! = false, utf8IsTitle: Boolean! = false, utf8IsUpper: Boolean! = false): Long!

  """whether any values evaluate to true"""
  any: Boolean!

  """whether all values evaluate to true"""
  all: Boolean!

  """list of values"""
  values: [String]!

  """unique values and counts"""
  unique: StringSet!

  """Return sorted values. Optimized for fixed length."""
  sort(reverse: Boolean! = false, length: Long = null): [String]!

  """minimum value"""
  min: String

  """maximum value"""
  max: String

  """Return values with null elements replaced."""
  fillNull(value: String!): StringColumn!

  """length of bytes or strings"""
  binaryLength: IntColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: String!): StringColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: String!): StringColumn!

  """strings converted to lowercase"""
  utf8Lower: StringColumn!

  """strings converted to uppercase"""
  utf8Upper: StringColumn!

  """Return strings split on pattern, by default whitespace."""
  split(pattern: String! = "", maxSplits: Int! = -1, reverse: Boolean! = false): ListColumn!
}

"""predicates for strings"""
input StringFilter {
  equal: String
  notEqual: String
  less: String
  lessEqual: String
  greater: String
  greaterEqual: String
  isIn: [String!]
  matchSubstring: String
  utf8Lower: Boolean! = false
  utf8Upper: Boolean! = false
  stringIsAscii: Boolean! = false
  utf8IsAlnum: Boolean! = false
  utf8IsAlpha: Boolean! = false
  utf8IsDecimal: Boolean! = false
  utf8IsDigit: Boolean! = false
  utf8IsLower: Boolean! = false
  utf8IsNumeric: Boolean! = false
  utf8IsPrintable: Boolean! = false
  utf8IsSpace: Boolean! = false
  utf8IsTitle: Boolean! = false
  utf8IsUpper: Boolean! = false
  apply: OrdinalFilter
}

"""functions for strings"""
input StringFunction {
  alias: String
  minimum: String
  maximum: String
  fillNull: String
  binaryLength: Boolean! = false
  utf8Lower: Boolean! = false
  utf8Upper: Boolean! = false
}

"""unique strings"""
type StringSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [String]!
}

"""column of structs"""
type StructColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """field names"""
  names: [String!]!

  """Return struct field as a column."""
  column(name: String!): Column!
}

"""a column-oriented table"""
type Table {
  """number of rows"""
  length: Long!

  """fields for each column"""
  columns: Columns!

  """
  Return column of any type by name.
          This is typically only needed for aliased columns added by `apply` or `aggregate`.
          If the column is in the schema, `columns` can be used instead.
  """
  column(name: String!): Column!

  """Return scalar values at index."""
  row(index: Long! = 0): Row!

  """Return table slice."""
  slice(offset: Long! = 0, length: Long = null): Table!

  """
  Return table grouped by columns, with stable ordering.
          Optionally include counts in an aliased column.
          `length` is the maximum number of groups to return.
  """
  group(by: [String!]!, reverse: Boolean! = false, length: Long = null, count: String! = ""): Table!

  """
  Return table partitioned by discrete differences of the values.
          Optionally include counts in an aliased column.
          Differs from `group` by relying on adjacency, and is typically faster.
  """
  partition(by: [String!]!, diffs: Diffs = null, count: String! = ""): Table!

  """
  Return table of first or last occurrences grouped by columns, with stable ordering.
          Optionally include counts in an aliased column.
          Faster than `group` when only scalars are needed.
  """
  unique(by: [String!]!, reverse: Boolean! = false, length: Long = null, count: String! = ""): Table!

  """Return table slice sorted by specified columns."""
  sort(by: [String!]!, reverse: Boolean! = false, length: Long = null): Table!

  """Return table with minimum values per column."""
  min(by: [String!]!): Table!

  """Return table with maximum values per column."""
  max(by: [String!]!): Table!

  """
  Return table with rows which match all (by default) queries.
          `invert` optionally excludes matching rows.
          `reduce` is the binary operator to combine filters; within a column all predicates must match.
          `predicates` are additional filters for column of unknown types, as the result of `apply`.
          List columns apply their respective filters to their own scalar values.
  """
  filter(query: Filters = null, invert: Boolean! = false, reduce: Operator! = AND, predicates: [Filter!]! = []): Table!

  """
  Return view of table with functions applied across columns.
          If no alias is provided, the column is replaced and should be of the same type.
          If an alias is provided, a column is added and may be referenced in the `column` interface,
          in filter `predicates`, and in the `by` arguments of grouping and sorting.
  """
  apply(uint8: IntFunction, int8: IntFunction, uint16: IntFunction, int16: IntFunction, uint32: LongFunction, int32: IntFunction, uint64: LongFunction, int64: LongFunction, float: FloatFunction, double: FloatFunction, decimal: DecimalFunction, date32: DateFunction, date64: DateFunction, timestamp: DateTimeFunction, time32: TimeFunction, time64: TimeFunction, binary: BinaryFunction, string: StringFunction, snakeId: LongFunction, camelId: LongFunction, list: ListFunction): Table!

  """
  Return a list of tables by splitting list columns, typically used after grouping.
          At least one list column must be referenced, and all list columns must have the same shape.
  """
  tables: [Table!]!

  """
  Return single table with aggregate functions applied to columns.
          The grouping keys are automatically included.
          Any remaining columns referenced in fields are kept as list columns.
          Columns which are aliased or change type can be accessed by the `column` field.
  """
  aggregate(count: [Field!]! = [], first: [Field!]! = [], last: [Field!]! = [], min: [Field!]! = [], max: [Field!]! = [], sum: [Field!]! = [], mean: [Field!]! = [], any: [Field!]! = [], all: [Field!]! = [], unique: [Field!]! = []): Table!
}

"""Time (isoformat)"""
scalar Time

"""column of times"""
type TimeColumn implements Column {
  """array type"""
  type: String!

  """number of rows"""
  length: Long!

  """
  Return number of matching values.
          Optimized for `null`, and empty queries will attempt boolean conversion.
  """
  count(equal: Time, notEqual: Time, less: Time, lessEqual: Time, greater: Time, greaterEqual: Time, isIn: [Time!]): Long!

  """list of values"""
  values: [Time]!

  """unique values and counts"""
  unique: TimeSet!

  """minimum value"""
  min: Time

  """maximum value"""
  max: Time

  """Return values with null elements replaced."""
  fillNull(value: Time!): TimeColumn!

  """Return element-wise minimum compared to scalar."""
  minimum(value: Time!): TimeColumn!

  """Return element-wise maximum compared to scalar."""
  maximum(value: Time!): TimeColumn!
}

"""predicates for times"""
input TimeFilter {
  equal: Time
  notEqual: Time
  less: Time
  lessEqual: Time
  greater: Time
  greaterEqual: Time
  isIn: [Time!]
  apply: OrdinalFilter
}

"""functions for times"""
input TimeFunction {
  alias: String
  minimum: String
  maximum: String
  fillNull: Time
}

"""unique times"""
type TimeSet implements Set {
  counts: [Long!]!

  """number of rows"""
  length: Long!

  """list of values"""
  values: [Time]!
}